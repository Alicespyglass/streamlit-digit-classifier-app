import streamlit as st
from streamlit_drawable_canvas import st_canvas
import torch
import torch.nn.functional as F
import numpy as np
from PIL import Image, ImageOps
from model import DigitClassifier  # Your model class from model.py

# Set title
st.title("ðŸ§  Digit Recognizer (MNIST)")
st.markdown("Draw a digit (0â€“9) below and see what the model predicts.")

# Load model
@st.cache_resource
def load_model():
    model = DigitClassifier()
    model.load_state_dict(torch.load("mnist_model.pth", map_location="cpu"))
    model.eval()
    return model

model = load_model()

# Create a drawing canvas
canvas_result = st_canvas(
    fill_color="white",
    stroke_width=10,
    stroke_color="black",
    background_color="white",
    height=280,
    width=280,
    drawing_mode="freedraw",
    key="canvas"
)

# Predict button
if canvas_result.image_data is not None:
    # Convert drawing to 28x28 grayscale image
    img = Image.fromarray((255 - canvas_result.image_data[:, :, 0]).astype('uint8'))  # Invert colors
    img = img.resize((28, 28))
    img = ImageOps.invert(img)
    img = img.convert('L')  # convert to grayscale

    # Show preprocessed image
    st.image(img, caption="Preprocessed Image (28x28)", width=100)

    # Convert to tensor
    img_tensor = torch.tensor(np.array(img), dtype=torch.float32).unsqueeze(0).unsqueeze(0) / 255.0

    # Predict
    with torch.no_grad():
        output = model(img_tensor)
        probabilities = F.softmax(output, dim=1)
        predicted_digit = torch.argmax(probabilities, dim=1).item()
        confidence = torch.max(probabilities).item()

    # Display prediction
    st.subheader(f"Prediction: {predicted_digit}")
    st.write(f"Confidence: {confidence:.2%}")

    # Feedback form
    with st.form("feedback_form"):
        true_label = st.number_input("Correct digit (if different)", min_value=0, max_value=9, step=1)
        submitted = st.form_submit_button("Submit Feedback")
        if submitted:
            st.success(f"Thanks! You entered: {true_label}. This could be saved for retraining later.")
            # TODO: Save feedback to file/db if desired

else:
    st.info("Draw a digit in the canvas above and wait for prediction.")
